{"ast":null,"code":"var _jsxFileName = \"/Users/aaronmoruf/Desktop/begonia_medical/frontend/src/components/SharedStates/InventoryProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n//these types must be defined properly to prevent problems where the state is used\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InventoryContext = /*#__PURE__*/createContext(undefined);\nconst InventoryProvider = ({\n  children\n}) => {\n  _s();\n  const [inventoryData, setInventoryData] = useState([]);\n  return /*#__PURE__*/_jsxDEV(InventoryContext.Provider, {\n    value: {\n      inventoryData,\n      setInventoryData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n_s(InventoryProvider, \"LGdekU0757hIvkIrQ8jW9nP9dog=\");\n_c = InventoryProvider;\nexport const useInventory = () => {\n  _s2();\n  const context = useContext(InventoryContext);\n  if (!context) {\n    throw new Error('useInventory must be used within an Inventory Provider');\n  }\n  return context;\n};\n_s2(useInventory, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default InventoryProvider;\nvar _c;\n$RefreshReg$(_c, \"InventoryProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","InventoryContext","undefined","InventoryProvider","children","_s","inventoryData","setInventoryData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useInventory","_s2","context","Error","$RefreshReg$"],"sources":["/Users/aaronmoruf/Desktop/begonia_medical/frontend/src/components/SharedStates/InventoryProvider.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { InventoryItem } from '../../types';\n\n//these types must be defined properly to prevent problems where the state is used\n\ninterface InventoryContextType {\n    inventoryData: InventoryItem[],\n    setInventoryData: React.Dispatch <React.SetStateAction<InventoryItem[]>> // to be able to have direct assignment and functional assignment\n}\n\nconst InventoryContext = createContext<InventoryContextType | undefined>(undefined);\n\nconst InventoryProvider : (React.FC<{ children: React.ReactNode }>) = ({children}) => {\n    const [inventoryData, setInventoryData] = useState<InventoryItem[]>([]);\n\n    return(\n        <InventoryContext.Provider value = {{inventoryData, setInventoryData}}>\n            {children}\n        </InventoryContext.Provider>\n    )\n    \n}\n\nexport const useInventory = () => {\n    const context = useContext(InventoryContext);\n    if (!context) {\n        throw new Error('useInventory must be used within an Inventory Provider')\n    }\n    return context\n}\nexport default InventoryProvider;\n\n\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAGlE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOA,MAAMC,gBAAgB,gBAAGL,aAAa,CAAmCM,SAAS,CAAC;AAEnF,MAAMC,iBAA6D,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAClF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAkB,EAAE,CAAC;EAEvE,oBACIE,OAAA,CAACC,gBAAgB,CAACO,QAAQ;IAACC,KAAK,EAAI;MAACH,aAAa;MAAEC;IAAgB,CAAE;IAAAH,QAAA,EACjEA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAGpC,CAAC;AAAAR,EAAA,CATKF,iBAA6D;AAAAW,EAAA,GAA7DX,iBAA6D;AAWnE,OAAO,MAAMY,YAAY,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC9B,MAAMC,OAAO,GAAGpB,UAAU,CAACI,gBAAgB,CAAC;EAC5C,IAAI,CAACgB,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,wDAAwD,CAAC;EAC7E;EACA,OAAOD,OAAO;AAClB,CAAC;AAAAD,GAAA,CANYD,YAAY;AAOzB,eAAeZ,iBAAiB;AAAC,IAAAW,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}